(self.webpackChunkprocessFlowWeb=self.webpackChunkprocessFlowWeb||[]).push([[2400],{6263:(y,f,n)=>{n.d(f,{Ky:()=>h,Lq:()=>i});var a=n(2831),r=n(2937),c=n(2495),g=n(1226),x=n(2079);n(9219);const p=(0,a.i$)({passive:!0});let i=(()=>{class o{constructor(e,t){this._platform=e,this._ngZone=t,this._monitoredElements=new Map}monitor(e){if(!this._platform.isBrowser)return g.E;const t=(0,c.fI)(e),s=this._monitoredElements.get(t);if(s)return s.subject;const _=new x.xQ,m="cdk-text-field-autofilled",M=v=>{"cdk-text-field-autofill-start"!==v.animationName||t.classList.contains(m)?"cdk-text-field-autofill-end"===v.animationName&&t.classList.contains(m)&&(t.classList.remove(m),this._ngZone.run(()=>_.next({target:v.target,isAutofilled:!1}))):(t.classList.add(m),this._ngZone.run(()=>_.next({target:v.target,isAutofilled:!0})))};return this._ngZone.runOutsideAngular(()=>{t.addEventListener("animationstart",M,p),t.classList.add("cdk-text-field-autofill-monitored")}),this._monitoredElements.set(t,{subject:_,unlisten:()=>{t.removeEventListener("animationstart",M,p)}}),_}stopMonitoring(e){const t=(0,c.fI)(e),s=this._monitoredElements.get(t);s&&(s.unlisten(),s.subject.complete(),t.classList.remove("cdk-text-field-autofill-monitored"),t.classList.remove("cdk-text-field-autofilled"),this._monitoredElements.delete(t))}ngOnDestroy(){this._monitoredElements.forEach((e,t)=>this.stopMonitoring(t))}}return o.\u0275fac=function(e){return new(e||o)(r.\u0275\u0275inject(a.t4),r.\u0275\u0275inject(r.NgZone))},o.\u0275prov=r.\u0275\u0275defineInjectable({token:o,factory:o.\u0275fac,providedIn:"root"}),o})(),h=(()=>{class o{}return o.\u0275fac=function(e){return new(e||o)},o.\u0275mod=r.\u0275\u0275defineNgModule({type:o}),o.\u0275inj=r.\u0275\u0275defineInjector({}),o})()},2400:(y,f,n)=>{n.r(f),n.d(f,{MAT_LEGACY_INPUT_VALUE_ACCESSOR:()=>r.MAT_INPUT_VALUE_ACCESSOR,MatLegacyInput:()=>E,MatLegacyInputModule:()=>p,getMatLegacyInputUnsupportedTypeError:()=>r.getMatInputUnsupportedTypeError});var a=n(2937),r=n(8524),c=n(4630),g=n(6263),x=n(5995);let E=(()=>{class i extends r.MatInput{constructor(){super(...arguments),this._legacyFormField=(0,a.inject)(c.MAT_LEGACY_FORM_FIELD,{optional:!0})}_getPlaceholder(){const l=this._legacyFormField;return l&&"legacy"===l.appearance&&!l._hasLabel?.()?null:this.placeholder}}return i.\u0275fac=function(){let u;return function(h){return(u||(u=a.\u0275\u0275getInheritedFactory(i)))(h||i)}}(),i.\u0275dir=a.\u0275\u0275defineDirective({type:i,selectors:[["input","matInput",""],["textarea","matInput",""],["select","matNativeControl",""],["input","matNativeControl",""],["textarea","matNativeControl",""]],hostAttrs:[1,"mat-input-element","mat-form-field-autofill-control"],hostVars:15,hostBindings:function(l,h){2&l&&(a.\u0275\u0275attribute("data-placeholder",h.placeholder),a.\u0275\u0275classProp("mat-input-server",h._isServer)("mat-mdc-input-element",!1)("mat-mdc-form-field-textarea-control",!1)("mat-mdc-form-field-input-control",!1)("mdc-text-field__input",!1)("mat-mdc-native-select-inline",!1)("mat-native-select-inline",h._isInlineSelect()))},exportAs:["matInput"],features:[a.\u0275\u0275ProvidersFeature([{provide:c.MatLegacyFormFieldControl,useExisting:i}]),a.\u0275\u0275InheritDefinitionFeature]}),i})(),p=(()=>{class i{}return i.\u0275fac=function(l){return new(l||i)},i.\u0275mod=a.\u0275\u0275defineNgModule({type:i}),i.\u0275inj=a.\u0275\u0275defineInjector({providers:[x.ErrorStateMatcher],imports:[g.Ky,c.MatLegacyFormFieldModule,x.MatCommonModule,g.Ky,c.MatLegacyFormFieldModule]}),i})()}}]);